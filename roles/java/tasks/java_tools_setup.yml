---
- ansible.builtin.assert:
    that:
      - home_folder is defined
      - home_folder != ""
      - item is defined
      - item.name is defined
      - item.name != ""
      - item.source is defined
      - item.source != ""
      - item.owner is defined
      - item.owner != ""
    quiet: true

- ansible.builtin.set_fact:
    path_to_archive: "{{ home_folder }}/{{ item.name }}.tgz"

- ansible.builtin.stat:
    path: "{{ path_to_archive }}"
  register: archive

- name: "Download archive from {{ item.source }}"
  ansible.builtin.get_url:
    url: "{{ item.source }}"
    dest: "{{ path_to_archive }}"
  retries: 3
  delay: 5
  register: archive_download
  when:
    - archive.stat is defined
    - not archive.stat.exists

- ansible.builtin.stat:
    path: "{{ item.home }}"
  register: path_to_home

- name: "Unpack archive {{ path_to_archive }}"
  block:
#    - name: "Deleting previous folder if existing {{ item.home }}"
#      file:
#        state: absent
#        path: "{{ item.home }}"
#
#    - name: "Create home directory {{ item.home }}"
#      file:
#        state: directory
#        path: "{{ item.home }}"

    - ansible.builtin.stat:
        path: "{{ item.home }}/{{ item.name }}"
      register: path_to_home

    - ansible.builtin.assert:
        that:
          - path_to_home is defined
          - path_to_home.stat is defined
        quiet: true

    - name: "Decompress archive {{ path_to_archive }}"
      ansible.builtin.unarchive:
        src: "{{ path_to_archive }}"
        dest: "{{ item.home }}"
        remote_src: yes
      when:
        - path_to_home is defined
        - path_to_home.stat is defined
        - not path_to_home.stat.exists
  when:
    - archive_download is defined
      #    - path_to_home.stat is defined
      #- not path_to_home.stat.exists

- name: "Ensure appropriate owner/group: {{ item.home }}."
  ansible.builtin.file:
    state: directory
    path: "{{ item.home }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    recurse: yes
  when: 
    - not ansible_check_mode is defined
