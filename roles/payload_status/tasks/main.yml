---
- ansible.builtin.assert:
    that:
      - ares.home is defined
      - ares.home != ""
    quiet: true

- ansible.builtin.include_role:
    name: fast_yum_install
  vars:
    package_name: rsync

- ansible.builtin.stat:
    path: "{{ ares.home }}"
  register: ares_home
 
- ansible.builtin.assert:
    that:
      - ares_home is defined
      - ares_home.stat is defined
      - ares_home.stat.exists
    quiet: true

- ansible.builtin.stat:
    path: "{{ payload_status.git.keyfile}}"
  register: github_keyfile_path

- ansible.builtin.assert:
    that:
      - github_keyfile_path is defined
      - github_keyfile_path.stat is defined
      - github_keyfile_path.stat.exists
    quiet: true

- ansible.builtin.stat:
    path: "{{ payload_status.home }}/build"
  register: payload_build_dir_path

- name: "Checkout payload_status from git: {{ payload_status.git.url }}"
  ansible.builtin.git:
    repo: "{{ payload_status.git.url }}"
    dest: "{{ payload_status.home }}"
    version: "{{ payload_status.git.version }}"
    key_file: "{{ payload_status.git.keyfile }}"
  register: git_results

- name: "Ensure {{ payload_status.home }} belongs to {{ payload_status.owner }}"
  ansible.builtin.command:
    # just to be faster, file: takes ages...
    cmd: "chown -R {{ payload_status.owner }}:{{ payload_status.group }} {{ payload_status.home }}"
    warn: false
#
#  file:
#   path: "{{ payload_status.home }}"
#    recurse: yes
#    owner: "{{ payload_status.owner }}"
#    group: "{{ payload_status.group }}"
  changed_when: false # weirdly this task always ends up in changed=true

- name: "Ensures yarn build env vars are set"
  ansible.builtin.template:
    src: templates/env.j2
    dest: "{{ payload_status.home }}/.env"
    owner: "{{ payload_status.owner }}"
    group: "{{ payload_status.group }}"
  register: payload_env

- ansible.builtin.include_role:
    name: podman

- name: "Running the payload_status container"
  containers.podman.podman_container:
    name: yarn-builder-container
    image: localhost/yarn-builder:latest
    volume: "{{ payload_status.home }}:/workspace:rw"
    state: started
    # the next steps depend on outcome of this run - keep container attached until build is done
    detach: no
    command: "./build.sh"
  become_user: "{{ payload_status.owner }}"
  when:
    - git_results.changed or payload_env.changed

- ansible.builtin.set_fact:
    build_dir: "{{ payload_status.home }}/build"

- ansible.builtin.stat:
    path: "{{ build_dir }}"
  register: path_to_build_dir

- ansible.builtin.assert:
    that:
      - path_to_build_dir is defined
      - path_to_build_dir.stat is defined
      - nginx_http_docroot is defined
    quiet: true

- ansible.builtin.set_fact:
    payload_status_deploy_dir: "{{ nginx_http_docroot }}/payload-status"
  when:
    - nginx_http_docroot is defined

- name: "Delete previous deployment"
  ansible.builtin.file:
    state: absent
    path: "{{ payload_status_deploy_dir }}"
  when:
    - git_results.changed

- ansible.builtin.stat:
    path: "{{ payload_status_deploy_dir }}"
  register: path_to_payload_status_deploy_dir

- name: "Create new deployment dir if needed"
  block:
    - ansible.builtin.file:
        state: directory
        path: "{{ payload_status_deploy_dir }}"
        owner: "{{ nginx.username }}"
        group: "{{ nginx.groupname }}"

    - command: "rsync -Avrz {{ build_dir }}/ {{ nginx.docroot }}/payload-status/"
      register: rsync_results
  when:
    - path_to_payload_status_deploy_dir is defined
    - path_to_payload_status_deploy_dir.stat is defined
    - not path_to_payload_status_deploy_dir.stat.exists
