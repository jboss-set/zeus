configuration-as-code:
  deprecated: warn
{% if jenkins_credentials is defined %}
credentials:
  system:
    domainCredentials:
    - credentials:
{% for cred in jenkins_credentials %}
      - usernamePassword:
          id: "{{ cred.id }}"
          password: "{{ cred.password }}"
          scope: GLOBAL
          username: "{{ cred.username }}"
{% endfor %}
{% endif %}
jenkins:
{% if jenkins_token is defined %}
  authorizationStrategy:
    roleBased:
      roles:
        global:
          - name: "{{ jenkins.role.admin.name }}"
            description: "{{ jenkins.role.admin.desc }}"
            permissions:
              - "Overall/Administer"
            entries:
              - group: "{{ jenkins.role.admin.group }}"
          - name: "{{ jenkins.role.ansibleCI.name }}"
            description: "{{ jenkins.role.ansibleCI.desc }}"
            permissions:
              - "Overall/Administer"
            entries:
              - group: "{{ jenkins.role.ansibleCI.group }}"
          - name: "anonymous"
            description: "Anonymous users"
            permissions:
              - "Overall/Read"
              - "Job/Read"
            entries:
              - group: "anonymous"
          - name: "readonly"
            description: "Read-only users"
            permissions:
              - "Overall/Read"
              - "Job/Read"
              - "Job/ExtendedRead"
              - "View/Read"
            entries:
              - group: "authenticated"
          - name: "{{ jenkins.role.user.name }}"
            description: "{{ jenkins.role.user.desc }}"
            permissions:
              - "Job/Move"
              - "Job/Build"
              - "Job/Create"
              - "Job/Read"
              - "Run/Replay"
              - "Job/Cancel"
              - "Run/Delete"
              - "Job/ExtendedRead"
              - "Run/Update"
              - "Job/Delete"
              - "Job/Configure"
              - "Job/Workspace"
              - "Agent/Provision"
              - "Agent/Configure"
              - "Agent/ExtendedRead"
              - "Agent/Connect"
              - "Agent/Delete"
              - "Agent/Disconnect"
              - "Agent/Create"
              - "Agent/Build"
            entries:
              - group: "{{ jenkins.role.user.group }}"
{% endif %}
  globalNodeProperties:
    - envVars:
        env:
          - key: "JENKINS_HOME_DIR"
            value: "{{ jenkins_home | default('/home/jenkins/current') }}/"
{% if jenkins_secrets_as_env_vars is defined %}{% for item in jenkins_secrets_as_env_vars %}
          - key: "{{ item.name }}"
            value: "{{ item.value }}"
{% endfor %}{% endif %}
  numExecutors: {{ jenkins.executors.num }}
  securityRealm:
{% if jenkins_sso_wellknow_openid_config_url is defined %}
    oic:
      serverConfiguration:
        wellKnown:
          wellKnownOpenIDConfigurationUrl: "{{ jenkins_sso_wellknow_openid_config_url }}"
          scopesOverride: "openid email"
      clientId: "{{ jenkins_sso_client_id }}"
      clientSecret: "none"
      disableSslVerification: false
      groupsFieldName: "groups"
      logoutFromOpenidProvider: false
      userNameField: "preferred_username"
{% elif instance.oidc.authorization_endpoint is defined and instance.oidc.authorization_endpoint | length %}
    oic:
      authorizationServerUrl: "{{ instance.oidc.authorization_endpoint }}"
      tokenServerUrl: "{{ instance.oidc.token_endpoint }}"
      userInfoServerUrl: "{{ instance.oidc.userinfo_endpoint }}"
      automanualconfigure: "manual"
      clientId: "{{ instance.oidc.client_id }}"
      clientSecret: "{{ instance.oidc.client_secret }}"
      disableSslVerification: false
      groupsFieldName: "groups"
      logoutFromOpenidProvider: false
      scopes: "openid email"
      tokenAuthMethod: "client_secret_post"
      userNameField: "preferred_username"
{% elif jenkins.ldap.url is defined and jenkins.ldap.url != ""  %}
    ldap:
      configurations:
      - groupSearchBase: "{{ jenkins.ldap.search.group.base }}"
        groupSearchFilter: "{{ jenkins.ldap.search.group.filter }}"
        inhibitInferRootDN: false
        rootDN: "{{ jenkins.ldap.rootDn }}"
        server: "{{ jenkins.ldap.url }}"
{% else %}
    local:
      allowsSignup: false
      users:
       - id: {{ jenkins.admin.id }}
         password: {{ jenkins.admin.password }}
{% endif %}
{% if jenkins.view is defined %}
views:
  - all:
      name: "all"
{% for view in jenkins.view %}
  - list:
      name: "{{ view.name }}"
      columns:
      - "status"
      - "weather"
      - "jobName"
      - "lastSuccess"
      - "lastFailure"
      - "lastDuration"
      - "buildButton"
{% if view.includeRegex is defined%}
      includeRegex: "{{ view.includeRegex }}"
{% endif %}
{% if view.excludeRegex is defined%}
      excludeRegex: "{{ view.excludeRegex }}"
{% endif %}
{% if view.jobNames is defined%}
      jobNames:
{% for jobName in view.jobNames %}
      - "{{ jobName }}"
{% endfor %}
{% endif %}
{% endfor %}
  - list:
      name: "Failing Jobs"
      columns:
      - "status"
      - "weather"
      - "jobName"
      - "lastSuccess"
      - "lastFailure"
      - "lastDuration"
      - "buildButton"
      jobNames: []
      jobFilters:
        - jobStatusFilter:
            aborted: false
            disabled: false
            failed: true
            includeExcludeTypeString: "includeMatched"
            stable: false
            unstable: false
        - jobStatusFilter:
            aborted: false
            disabled: true
            failed: false
            includeExcludeTypeString: "excludeMatched"
            stable: false
            unstable: false
{% endif %}

security:
  globalJobDslSecurityConfiguration:
    useScriptSecurity: false
{% if jenkins.script.approvals is defined %}
  scriptApproval:
    approvedSignatures:
{% for approvedSignature in jenkins.script.approvals  %}
        - "{{ approvedSignature }}"
{% endfor %}
{% endif %}
tool:

unclassified:
  location:
    url: {{ instance.url }}
{% if not ".next" in instance.url %}
  email-ext:
    defaultRecipients: "jboss-set-ops@redhat.com"
    defaultSuffix: "@redhat.com"
    mailAccount:
      smtpHost: "{{ mailer.smtp.host }}"
  mailer:
    replyToAddress: {{ mailer.replyTo }}
    smtpHost: {{ mailer.smtp.host }}
    smtpPort: {{ mailer.smtp.port }}{% endif %}

jobs:
  - url: "https://raw.githubusercontent.com/jboss-set/cedalion/main/job-configurator.groovy"
  - script: "queue('job-configurator')"
